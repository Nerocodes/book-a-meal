{"version":3,"sources":["../../../backend/controllers/auth/auth.controller.js"],"names":["AuthController","register","req","res","newUser","body","hashedPassword","bcrypt","hashSync","password","models","User","create","first_name","last_name","email","then","user","token","jwt","sign","id","config","secret","expiresIn","json","status","auth","data","catch","err","console","log","getSingleUser","findById","userId","attributes","exclude","users","login","oldUser","findOne","where","send","passwordIsValid","compareSync","_id","logout"],"mappings":"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","sourcesContent":["import models from '../../models/index';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\nimport config from '../../config';\r\n\r\nconst AuthController = {\r\n\r\n    // fetchAllUsers(req, res){\r\n    //     models.User.findAll().then(users => {\r\n    //         return res.json({\r\n    //             status: 'success',\r\n    //             data: users\r\n    //         }).status(200);\r\n    //     })\r\n    //     .catch(err => console.log(err));\r\n    // },\r\n\r\n    register(req, res){\r\n        /*\r\n            Expect json of format\r\n            {\r\n                first_name: DataTypes.STRING,\r\n                last_name: DataTypes.STRING,\r\n                email: DataTypes.STRING,\r\n                password: DataTypes.STRING\r\n            }\r\n         */\r\n         const newUser = req.body;\r\n         let hashedPassword = bcrypt.hashSync(newUser.password, 8);\r\n\r\n\r\n         models.User.create({\r\n             first_name: newUser.first_name,\r\n             last_name: newUser.last_name,\r\n             email: newUser.email,\r\n             password: hashedPassword\r\n\r\n         }).then(user => {\r\n            const token = jwt.sign({ id: user.id}, config.secret, {\r\n                expiresIn: 86400\r\n            })\r\n            return res.json({\r\n                status: 'success',\r\n                auth: 'true',\r\n                token: token,\r\n                data: user\r\n             }).status(201);\r\n         }).catch(err => console.log(err));\r\n         \r\n    },\r\n\r\n    getSingleUser(req, res){\r\n            \r\n        models.User.findById(req.userId, {\r\n            attributes: {\r\n                exclude: ['password']\r\n            }\r\n        }).then(users => {\r\n            return res.json({\r\n                status: 'success',\r\n                data: users\r\n                }).status(200);\r\n        }).catch(err => console.log(err));\r\n        \r\n    },\r\n\r\n    login(req, res){\r\n        let oldUser = req.body;\r\n        models.User.findOne({ where :{ email: oldUser.email }}).then(user => {\r\n            if (!user) return res.status(404).send('No user found.');\r\n            let passwordIsValid = bcrypt.compareSync(oldUser.password, user.password);\r\n            if (!passwordIsValid) return res.status(401).send({ auth: false, token: null });\r\n            const token = jwt.sign({ id: user._id }, config.secret, {\r\n              expiresIn: 86400 // expires in 24 hours\r\n            });\r\n            res.status(200).send({ auth: true, token: token });\r\n        }).catch(err => {\r\n            return res.status(500).send('Error on the server.');\r\n        });\r\n    },\r\n    \r\n    logout(req, res){\r\n        res.status(200).send({ auth: false, token: null });\r\n    },\r\n\r\n    // updateAUser(req, res){\r\n    //     const id = req.params.id;\r\n    //     const newUser = req.body;\r\n    //     models.User.findById(id).then(users => {\r\n    //         users.update({\r\n    //             first_name: newUser.first_name,\r\n    //             last_name: newUser.last_name,\r\n    //             email: newUser.email,\r\n    //             password: newUser.password\r\n    //         }).then(user => {\r\n    //             return res.json({\r\n    //                 status: 'success',\r\n    //                 data: user\r\n    //              }).status(201);\r\n    //         });\r\n    //     }).catch(err => console.log(err));\r\n    // },\r\n\r\n    // deleteAUser(req, res){\r\n    //     const id = req.params.id;\r\n    //     models.User.findById(id).then(users => {\r\n    //         users.destroy().then(() => {\r\n    //             return res.json({\r\n    //                 status: 'success',\r\n    //                 data: 'Deleted Successfully'\r\n    //              }).status(201);\r\n    //         });\r\n    //     }).catch(err => console.log(err));\r\n    // }\r\n}\r\n\r\nexport default AuthController;"],"file":"auth.controller.js"}