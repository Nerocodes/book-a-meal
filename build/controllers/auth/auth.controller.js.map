{"version":3,"sources":["../../../backend/controllers/auth/auth.controller.js"],"names":["AuthController","fetchAllUsers","req","res","models","User","findAll","then","users","json","status","data","catch","err","console","log","register","newUser","body","hashedPassword","bcrypt","hashSync","password","create","first_name","last_name","email","user","token","jwt","sign","id","config","secret","expiresIn","auth","getSingleUser","findById","userId","attributes","exclude","login","oldUser","findOne","where","send","passwordIsValid","compareSync","_id","logout","updateAUser","params","update","deleteAUser","destroy"],"mappings":"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","sourcesContent":["import models from '../../models/index';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\nimport config from '../../config';\r\n\r\nconst AuthController = {\r\n\r\n    fetchAllUsers(req, res){\r\n        models.User.findAll().then(users => {\r\n            return res.json({\r\n                status: 'success',\r\n                data: users\r\n            }).status(200);\r\n        })\r\n        .catch(err => console.log(err));\r\n    },\r\n\r\n    register(req, res){\r\n        /*\r\n            Expect json of format\r\n            {\r\n                first_name: DataTypes.STRING,\r\n                last_name: DataTypes.STRING,\r\n                email: DataTypes.STRING,\r\n                password: DataTypes.STRING\r\n            }\r\n         */\r\n         const newUser = req.body;\r\n         let hashedPassword = bcrypt.hashSync(newUser.password, 8);\r\n\r\n\r\n         models.User.create({\r\n             first_name: newUser.first_name,\r\n             last_name: newUser.last_name,\r\n             email: newUser.email,\r\n             password: hashedPassword\r\n\r\n         }).then(user => {\r\n            const token = jwt.sign({ id: user.id}, config.secret, {\r\n                expiresIn: 86400\r\n            });\r\n            return res.json({\r\n                status: 'success',\r\n                auth: 'true',\r\n                token: token,\r\n                data: user\r\n             }).status(201);\r\n         }).catch(err => console.log(err));\r\n         \r\n    },\r\n\r\n    getSingleUser(req, res){\r\n            \r\n        models.User.findById(req.userId, {\r\n            attributes: {\r\n                exclude: ['password']\r\n            }\r\n        }).then(users => {\r\n            return res.json({\r\n                status: 'success',\r\n                data: users\r\n                }).status(200);\r\n        }).catch(err => console.log(err));\r\n        \r\n    },\r\n\r\n    login(req, res){\r\n        let oldUser = req.body;\r\n        models.User.findOne({ where :{ email: oldUser.email }}).then(user => {\r\n            if (!user) return res.status(404).send('No user found.');\r\n            let passwordIsValid = bcrypt.compareSync(oldUser.password, user.password);\r\n            if (!passwordIsValid) return res.status(401).send({ auth: false, token: null });\r\n            const token = jwt.sign({ id: user._id }, config.secret, {\r\n              expiresIn: 86400 // expires in 24 hours\r\n            });\r\n            res.status(200).send({ auth: true, token: token });\r\n        }).catch(err => {\r\n            return res.status(500).send('Error on the server.');\r\n        });\r\n    },\r\n    \r\n    logout(req, res){\r\n        res.status(200).send({ auth: false, token: null });\r\n    },\r\n\r\n    updateAUser(req, res){\r\n        const id = req.params.id;\r\n        const newUser = req.body;\r\n        models.User.findById(id).then(users => {\r\n            users.update({\r\n                first_name: newUser.first_name,\r\n                last_name: newUser.last_name,\r\n                email: newUser.email,\r\n                password: newUser.password\r\n            }).then(user => {\r\n                return res.json({\r\n                    status: 'success',\r\n                    data: user\r\n                 }).status(201);\r\n            });\r\n        }).catch(err => console.log(err));\r\n    },\r\n\r\n    deleteAUser(req, res){\r\n        const id = req.params.id;\r\n        models.User.findById(id).then(users => {\r\n            users.destroy().then(() => {\r\n                return res.json({\r\n                    status: 'success',\r\n                    data: 'Deleted Successfully'\r\n                 }).status(201);\r\n            });\r\n        }).catch(err => console.log(err));\r\n    }\r\n}\r\n\r\nexport default AuthController;"],"file":"auth.controller.js"}